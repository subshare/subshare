// BEGIN 'provided' support - part 1
// There is no 'provided' dependency out of the box.
// But: http://www.rqna.net/qna/utxsn-providedcompile-without-war-plugin.html
//configurations {
//	provided
//}
// END 'provided' support - part 1

dependencies {
	compile group: 'co.codewizards.cloudstore', name: 'co.codewizards.cloudstore.local', version: cloudstoreVersion
	compile group: 'co.codewizards.cloudstore', name: 'co.codewizards.cloudstore.core', version: cloudstoreVersion
	compile project(':org.subshare.core')
//	compileOnly group: 'org.slf4j', name: 'log4j-over-slf4j', version: slf4jVersion // provided => compileOnly
}

// BEGIN 'provided' support - part 2
//sourceSets.main.compileClasspath += configurations.provided
//sourceSets.test.compileClasspath += configurations.provided
//sourceSets.test.runtimeClasspath += configurations.provided
// END 'provided' support - part 2

compileJava.doLast {
	ant.echo("***********************************************");
	ant.echo("******************* ENHANCE *******************");
	ant.echo("***********************************************");
	ant.echo("Note: You must run gradle with the '-i' option to see output from the enhancer!");

	ant.taskdef(
		name: 'datanucleusenhancer',
		classname: 'org.datanucleus.enhancer.EnhancerTask',
		classpath: sourceSets.main.compileClasspath.asPath)

	ant.datanucleusenhancer(
		classpath: sourceSets.main.runtimeClasspath.asPath,
		filesuffixes: 'class,jdo',
		api: 'JDO',
		verbose: 'true')

	ant.echo("***********************************************");
	ant.echo("***********************************************");
	ant.echo("***********************************************");
}

compileTestJava {
//	sourceCompatibility = JavaVersion.VERSION_1_9
//	targetCompatibility = JavaVersion.VERSION_1_9
	moduleOptions {
		addModules = ['jmockit', 'org.assertj.core']
		addReads = [
			'org.subshare.local': 'jmockit',
			'org.subshare.local': 'org.assertj.core'
		]
	}
}

test {
	jvmArgs "-javaagent:${classpath.find { it.name.contains('jmockit') }.absolutePath}"
	moduleOptions {
		addModules = ['jmockit', 'org.assertj.core']
		addReads = [
			'org.subshare.local': 'jmockit',
			'org.subshare.local': 'org.assertj.core'
		]
	}
}

// TODO this should be in the root build.gradle in subprojects {...} or allprojects {...}, but it does not work :-(
// I get errors like this:
//   >> Could not get unknown property 'modularity' for project ':org.subshare.test' of type org.gradle.api.Project. <<
// But it works fine, if I put it into the sub-projects individually. This sucks :-( but at least it works.
// ...maybe this is because there are still some sub-projects not containing a module-info.java...
//modularity.mixedJavaRelease 8 // sets "--release 8" for main code, and "--release 9" for "module-info.java"
